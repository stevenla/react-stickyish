{"version":3,"sources":["index.js","../../src/index.tsx"],"names":["App","ref","useRef","lastScrollY","useState","top","setTop","position","setPosition","useEffect","listener","refEl","current","navHeight","scrollHeight","currentY","window","scrollY","lastY","addEventListener","removeEventListener","useStickyish","style","lineHeight","padding","color","left","right","backgroundColor","height","data-testid","range","map","i","key","ReactDOM","render","document","getElementById"],"mappings":"kKAKA,SAASA,IACP,IAAMC,EAAMC,mBADC,E,SCIbD,GAEA,IAAME,EAAcD,iBAAe,KACbE,mBAAiB,GAAhCC,OAAKC,SACoBF,mBAA2B,SAApDG,OAAUC,OA+BjB,OA9BAC,qBAAU,WACR,SAASC,IACP,IAAMC,EAAQV,EAAIW,QACZC,EAAaF,GAASA,EAAMG,cAAiB,EAC7CC,EAAWC,OAAOC,QAClBC,EAAQf,EAAYS,QACtBG,GAAY,GACdP,EAAY,YACZF,EAAO,IACES,EAAWG,EAEhBH,EAAWV,EAAMQ,EACnBP,EAAOS,EAAWF,GACTR,GAAOU,GAChBP,EAAY,SAIG,UAAbD,IACFC,EAAY,YACZF,EAAOS,IAGXZ,EAAYS,QAAUI,OAAOC,QAG/B,OADAD,OAAOG,iBAAiB,SAAUT,cAEhCM,OAAOI,oBAAoB,SAAUV,MAEtC,CAACL,EAAKE,EAAUN,IACZ,CAAEI,IAAkB,UAAbE,EAAuB,EAAIF,EAAKE,YDrCpBc,CAAapB,GAA/BI,EAFK,EAELA,IAAKE,EAFA,EAEAA,SACb,OACE,6BACE,yBACEN,IAAKA,EACLqB,MAAO,CACLC,WAAY,OACZC,QAAS,SACTC,MAAO,QACPC,KAAM,EACNC,MAAO,EACPC,gBAAiB,QACjBC,OAAQ,GACRxB,MACAE,aAXJ,mBAgBA,yBAAKe,MAAO,CAAEO,OAAQ,IAAMC,cAAY,WACxC,0EAEGC,IAAM,KAAKC,KAAI,SAACC,GACf,OAAO,yBAAKC,IAAKD,GAAIA,QAO/BE,IAASC,OAAO,kBAACpC,EAAD,MAASqC,SAASC,eAAe,U","file":"static/js/main.665c5287.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useStickyish } from \"react-stickyish\";\nimport range from \"lodash/range\";\n\nfunction App() {\n  const ref = useRef();\n  const { top, position } = useStickyish(ref);\n  return (\n    <div>\n      <nav\n        ref={ref}\n        style={{\n          lineHeight: \"60px\",\n          padding: \"0 20px\",\n          color: \"white\",\n          left: 0,\n          right: 0,\n          backgroundColor: \"black\",\n          height: 60,\n          top,\n          position,\n        }}\n      >\n        react-stickyish\n      </nav>\n      <div style={{ height: 60 }} data-testid=\"spacer\" />\n      <div>\n        Try scrolling down, then scrolling back up\n        {range(100).map((i) => {\n          return <div key={i}>{i}</div>;\n        })}\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { useState, useEffect, useRef } from \"react\";\nimport { PositionProperty } from \"csstype\";\n\n/**\n * Used to make navbars sticky-ish, where they will disappear when scrolling\n * down, but re-appear when scrolling up.\n * @param ref the element to track\n */\nexport function useStickyish(\n  ref: React.MutableRefObject<HTMLElement>\n): { top: number; position: PositionProperty } {\n  const lastScrollY = useRef<number>(0);\n  const [top, setTop] = useState<number>(0);\n  const [position, setPosition] = useState<PositionProperty>(\"fixed\");\n  useEffect(() => {\n    function listener() {\n      const refEl = ref.current;\n      const navHeight = (refEl && refEl.scrollHeight) || 0;\n      const currentY = window.scrollY;\n      const lastY = lastScrollY.current;\n      if (currentY <= 0) {\n        setPosition(\"absolute\");\n        setTop(0);\n      } else if (currentY < lastY) {\n        // Scroll up\n        if (currentY - top > navHeight) {\n          setTop(currentY - navHeight);\n        } else if (top >= currentY) {\n          setPosition(\"fixed\");\n        }\n      } else {\n        // Scroll down\n        if (position === \"fixed\") {\n          setPosition(\"absolute\");\n          setTop(currentY);\n        }\n      }\n      lastScrollY.current = window.scrollY;\n    }\n    window.addEventListener(\"scroll\", listener);\n    return () => {\n      window.removeEventListener(\"scroll\", listener);\n    };\n  }, [top, position, ref]);\n  return { top: position === \"fixed\" ? 0 : top, position };\n}\n"],"sourceRoot":""}